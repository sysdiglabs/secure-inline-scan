---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-bot
secrets:
  - name: docker-auth-for-tekton
  - name: sysdig-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: build-bot-tekton-pipelines-admin
  namespace: tekton-pipelines
subjects:
  - kind: User
    name: build-bot
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: tekton-pipelines-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: build-bot-deploy-role
  namespace: tekton-pipelines
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "create", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: build-bot-deploy-binding
  namespace: tekton-pipelines
subjects:
  - kind: ServiceAccount
    name: build-bot
    namespace: tekton-pipelines
roleRef:
  kind: Role
  name: build-bot-deploy-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-scan-push
spec:
  inputs:
    resources:
      - name: repository
        type: git
    params:
      - name: pathToDockerFile
        description: The path to the dockerfile to build
        default: /workspace/repository/Dockerfile
      - name: pathToContext
        description: The build context used by Kaniko (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
        default: /workspace/repository
  outputs:
    resources:
      - name: builtImage
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:latest
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(inputs.params.pathToDockerFile)
        - --destination=$(outputs.resources.builtImage.url)
        - --context=$(inputs.params.pathToContext)

    - name: scan
      image: sysdiglabs/secure-inline-scan:2
      args:
        - --registry-auth-file
        - /tekton/home/.docker/config.json
        - -s
        - https://secure.sysdig.com
        - $(outputs.resources.builtImage.url)
      securityContext:
        runAsUser: 0
      env:
        - name: SYSDIG_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: sysdig-secrets
              key: sysdig-secure-api-key

---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: demo-pipeline
spec:
  resources:
    - name: source-repo
      type: git
    - name: web-image
      type: image

  tasks:

    - name: build-skaffold-web
      taskRef:
        name: build-scan-push
      params:
        - name: pathToDockerFile
          value: Dockerfile
        - name: pathToContext
          value: /workspace/repository/examples/microservices/leeroy-web
      resources:
        inputs:
          - name: repository
            resource: source-repo
        outputs:
          - name: builtImage
            resource: web-image

# =================================================

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: skaffold-image-leeroy-web-pipelinerun
spec:
  type: image
  params:
    - name: url
      value: docker.io/vicenteherrera/leeroy-web

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: skaffold-git-pipelinerun
spec:
  type: git
  params:
    - name: revision
      value: v0.32.0
    - name: url
      value: https://github.com/GoogleContainerTools/skaffold

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineRun
metadata:
  name: demo-pipeline-run-1
spec:
  pipelineRef:
    name: demo-pipeline
  serviceAccountName: build-bot
  resources:
    - name: source-repo
      resourceRef:
        name: skaffold-git-pipelinerun
    - name: web-image
      resourceRef:
        name: skaffold-image-leeroy-web-pipelinerun
